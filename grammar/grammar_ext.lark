// main grammar file

// Still need to add (key language):
// ==================
// basic templating to specify type (like python typing)
// concurrency/ async
// Pattern matching
// Other built in types (?): hex, list, dict, set, tuple
// next and whatever else to support range-based iteration
// specify if overriding, implementing interfaces
// F string and string formatting/ templating
// enable commas, parens in for loop
// binary, hex, byte literals?
// *, ** like in Python
// Pipes and redirection?? use |> as operator perhaps
// expr or expr (like Python) (might just be a matter of overloading or method between types?)
// specify if pure to enable optimizations (?)
// Entry keyword to designate starting fn (as opposed to num main() { return 0 })
// using () and \ to allow multiple line spacing
// make sure ((inner) => {})(arg) like in JS
// allow assigning to lambda fn i.e. num func = (num arg) -> num {}
// haskell function call pattern matching?
// function overloading (an alternative to generics?)
// assign built-in that sets attribute and returns var that got modified
// generators
// https://medium.com/@kasperpeulen/10-features-from-various-modern-languages-that-i-would-like-to-see-in-any-programming-language-f2a4a8ee6727:
// implicit name ("it") for single param lambda functions
// cascade / spread operator? (merge objects)
// automatic currying (https://reasonml.github.io/docs/en/function.html#currying) (or partial functions? func.partial(a = 2, b = 2) for func(a, b, c) { return a + b + c}. See C++ bind, specialization)
// function and class extensions
//
// consider letting var decl without assignment
// allow traditional for loops ( for (let i = 0; i < 10; i++) {} ) in addition to curr
// access dictionaries using ".key" in addition to "['key']"
// pass variables by reference
// have $ or % or @ or smth replace self when referring to instance state vars
//
// make channel type modifier its own parameterized class


// Tentative:
// ======================
// do something w semicolons??
// do something w $??
// do something w #??
// auto keyword for type inference when dealing with pure fns or smth (??)
// default baked in math consts like pi, e?
// add structs?
// could theoretically make fn return type implicit (prob don't want to tho)
// could maybe be an "Any" type? Prob not tho...

// Tools:
// ========================
// line inspection like tools
// stuff like __line__ and __file__
// size kw to get size of object
// regex

// Done: (yay!)
// ========================
// Xor logic operator \DONE!
// keyword arguments
// module, floor division, exponent
// Ternary expr
// python "var = expr if cond else expr"
// bitwise or + and + xor
// for else, while else loops
// inf, ninf, (nan?) keywords
// Context managers (with, as)
// throw exceptions (try, catch, finally, else, throw)
// anon fns
// where deferment
// In place walrus assignment
// let indexes work like [2, 4, 1]
// Variable unpacking
// List/ dict/ set comprehension (indexing in general) (I think this works??)
// allow user to parameterize their classes with <>? as generic?
// should "as" keyword be more generalized?


// GLOBAL
// ======
root: (import_stmt | assign_decl_stmt | def_stmt)*

COMMENT: "#" /[^\n]/*
%ignore COMMENT

WS: /[ \t\f\r\n]/+
%ignore WS


// STATEMENTS
stmt: compound_stmt | simple_stmt
?compound_stmt: branch_stmt | loop_stmt | for_stmt | with_stmt | try_catch_stmt | func_def | class_def
?simple_stmt: assign_decl_stmt | assign_stmt | import_stmt | call_expr_stmt | flow_stmt
?flow_stmt: break_stmt | continue_stmt | return_stmt | throw_stmt | yield_stmt

branch_stmt: simple_branch_stmt ("else" simple_branch_stmt)* else_stmt?
simple_branch_stmt: "if" expr "{" body "}" -> if_branch_stmt
    | "unless" expr "{" body "}" -> unless_branch_stmt
else_stmt: "else" "{" body "}"

?loop_stmt: "until" expr "{" loop_body "}" [else] -> until_loop
    | "while" expr "{" loop_body "}" [else] -> while_loop 

for_stmt: "for" simple_id ("in" | ":") expr "{" loop_body "}" [else_stmt]

break_stmt: "break"
continue_stmt: "continue"
return_stmt: "return" [expr]
throw_stmt: "throw" expr
yield_stmt: "yield" expr

try_catch_stmt: try_stmt catch_stmt+ [else_stmt] [finally_stmt]
try_stmt: "try" "{" body "}"
catch_stmt: "catch" expr ["as" NAME] "{" body "}"
finally_stmt: "finally" "{" body "}"

with_stmt: "with" with_items "{" body "}"
with_items: with_item ("," with_item)* 
with_item: operation ["as" bw_or_op]

import_stmt: import_name | import_from
import_name: "import" dotted_as_names
import_from: "from" (dots? dotted_name | dots) "import" ("*" | "(" import_as_names ")" | import_as_names)
!dots: "."+
import_as_name: NAME ["as" NAME]
dotted_as_name: dotted_name ["as" NAME]
import_as_names: import_as_name ("," import_as_name)* [","]
dotted_as_names: dotted_as_name ("," dotted_as_name)*
dotted_name: NAME ("." NAME)*

this_id: THIS
THIS.1: "this"
super_id: SUPER
SUPER.1: "super"
formals: formal ("," formal)*
formal: type_ simple_id
decorators: decorator+
?decorator: "@" ref_expr ["(" arguments ")"]
decorated: decorators def_stmt
templating: "template" "<" simple_ids ">"
def_stmt: [templating] "class" simple_id ["(" ref_expr ")"] "{" [class_body] "}" -> cls_def
    | [templating] "func" [modifiers] simple_id "(" [formals] ")" "->" ret_type "{" body "}" -> fn_def

body: stmt*
class_body: (func_def | assign_decl_stmt)*


assign_decl_stmt: "let" declared_identifiers "=" (names "=")* exprs  // multiple on both sides for unpacking
names = NAME ("," NAME)*
declared_identifiers: declared_identifier ("," declared_identifier)*
declared_identifier: [type_modifiers] NAME

assign_stmts: atom_exprs "=" (atom_exprs "=")* exprs
atom_exprs: atom_expr ("," atom_expr)*


types: type_ ("," type_)*
?type_: (primitive_type | parameterized_object_type) [execution_modifier]  // should this also be prepended w scope modifier?

parameterization: "<" types ">"
parameterized_object_type: object_type [parameterization]
    //| container_type [parameterization] -> parameterized_container_type  // might not be needed it treating construction as builtin

?!mutability_modifier: "const"
?!scope_modifier: "static" | "global"
?!execution_modifier: "channel"
?!primitive_type: "bool" | "num" | "str" | "nonetype" | "void"
?object_type: fn_type | any_id
?fn_type: [mutability_modifier] [scope_modifier] "(" "[" [types] "]" "->" type_ ")"


?expr: or_op
    | expr "?" expr ":" expr -> ternary_op
    | "(" expr ("if" | "unless") expr ("else" expr ("if" | "unless") expr)* "else" expr ")" -> conditional
    | expr "where" expr "=" expr -> deffered
    | exprs ":=" exprs -> assign_expr
    | anon_fn
?or_op: and_op ("or" and_op)*
?and_op: not_op ("and" not_op)*
?not_op: "not" not_op | comparison
?!comparison: bw_or_op (("<"|">"|"=="|">="|"<="|"!="|"in"|"not" "in"|"is"|"is" "not") bw_or_op)*
?bw_or_op: bw_xor_op ("|" bw_xor_op)*
?bw_xor_op: bw_and_op ("^" bw_and_op)*
?bw_and_op: bw_shift_op ("&" bw_shift_op)*
?!bw_shift_op: arith_expr (("<<" | ">>") arith_expr)*
?!arith_expr: term (("+" | "-") term)*
?!term: factor (("*"|"@"|"/"|"%"|"//") factor)*
?!factor: ("+"|"-"|"~") factor | power
?power: atom_expr ("**" factor)?

?atom_expr: atom_expr "(" [arguments] ")" -> funccall
          | atom_expr "[" subscriptlist "]" -> getitem
          | atom_expr "." NAME -> getattr
          | atom

?atom: "(" yield_expr ")"
     | "(" _tuple_inner? ")" -> tuple
     | "(" comprehension{test_or_star_expr} ")" -> tuple_comprehension
     | "[" _testlist_comp? "]"  -> list
     | "[" comprehension{test_or_star_expr} "]"  -> list_comprehension
     | "{" _dict_exprlist? "}" -> dict
     | "{" comprehension{key_value} "}" -> dict_comprehension
     | "{" _set_exprlist "}" -> set
     | "{" comprehension{test} "}" -> set_comprehension
     | NAME -> var
     | number 
     | string_concat
     | "(" test ")"
     | "none"    -> const_none
     | "true"    -> const_true
     | "false"   -> const_false

?string_concat: string+

number: DEC_NUMBER | HEX_NUMBER | BIN_NUMBER | OCT_NUMBER | FLOAT_NUMBER | IMAG_NUMBER | INF | NINF

NAME: /[^\W\d]\w*/
COMMENT: /#[^\n]*/

STRING: /([ubf]?r?|r[ubf])("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
LONG_STRING: /([ubf]?r?|r[ubf])(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is

_SPECIAL_DEC: "0".."9"        ("_"?  "0".."9"                       )*
DEC_NUMBER:   "1".."9"        ("_"?  "0".."9"                       )*
          |   "0"             ("_"?  "0"                            )* /(?![1-9])/
HEX_NUMBER.2: "0" ("x" | "X") ("_"? ("0".."9" | "a".."f" | "A".."F"))+
OCT_NUMBER.2: "0" ("o" | "O") ("_"?  "0".."7"                       )+
BIN_NUMBER.2: "0" ("b" | "B") ("_"?  "0".."1"                       )+

_EXP: ("e"|"E") ["+" | "-"] _SPECIAL_DEC
DECIMAL: "." _SPECIAL_DEC | _SPECIAL_DEC "." _SPECIAL_DEC?
FLOAT_NUMBER.2: _SPECIAL_DEC _EXP | DECIMAL _EXP?
IMAG_NUMBER.2: (_SPECIAL_DEC      | FLOAT_NUMBER) ("J" | "j")

INF: "inf"
NINF: "ninf"


// Comma-separated list (with an optional trailing comma)
cs_list{item}: item ("," item)* ","?
_cs_list{item}: item ("," item)* ","?

arguments: argvalue ("," argvalue)*  ("," [ starargs | kwargs])?
         | starargs
         | kwargs
         | comprehension{test}

anon_fn: "(" formals ")" "->" type_ block  // this is an expr that contains stmts ...tricky
// END EXPR
// ========


%import common.SIGNED_NUMBER
%import common._STRING_ESC_INNER -> STRING_INNER
%import common.CNAME